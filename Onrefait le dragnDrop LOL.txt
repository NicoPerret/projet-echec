import { outputAst, verifyHostBindings } from '@angular/compiler';
import {
  AfterViewInit,
  Component,
  HostListener,
  Input,
  OnInit,
  Output,
  EventEmitter,
} from '@angular/core';
import * as SockJS from 'sockjs-client';
import { Stomp } from '@stomp/stompjs';
import { Utilisateur } from 'src/app/projet/model/utilisateur';

declare function dragDrop(coord: string, plateau: any): any;
@Component({
  selector: 'app-plateau64cases',
  templateUrl: './plateau64cases.component.html',
  styleUrls: ['./plateau64cases.component.css'],
})
export class Plateau64casesComponent implements OnInit, AfterViewInit {
  @Input()
  couleur!: string;

  private coord!: string;
  private possibilites: string[] = [];
  greetings: string[] = [];
  disabled = true;
  name!: string;
  private stompClient: any;
  private listePieces!: any[];
  private listeCoups!: string[];
  private prems: boolean = true;
  private plateau!: any;

  public lettres = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
  public nombres = [8, 7, 6, 5, 4, 3, 2, 1];

  @HostListener('dragstart') onClick() {
    async () => {
      let cpt = 1;
      let bool = true;
      let audio = new Audio('assets/372.mp3');

      const options = {
        method: 'POST',
        body: JSON.stringify(this.plateau),
        headers: {
          'Content-Type': 'application/json',
        },
      };

      (async () => {
        this.possibilites = await fetch(
          `http://localhost:8080/projet-echecs/api/coup-possible/${this.coord}`,
          options
        ).then((resp) => resp.json());
      })();

      for (let pos of this.possibilites) {
        const ClaDiv = document.querySelector(`#${pos}`) as HTMLDivElement;
        ClaDiv!.style.background = 'green';
      }
      if (bool) {
        bool = false;
        // timerJ1();
      }
    };
  }

  @HostListener('dragenter') JeremyJetaimeaussi() {
    document.querySelector('div')!.addEventListener('dragenter', (e: any) => {
      e.preventDefault();

      if (
        this.possibilites.find((pos) => pos === e.target.getAttribute('id'))
      ) {
        e.target.style.background = 'red';
      }
    });
  }

  @HostListener('dragleave') pouet() {
    document.querySelector('div')!.addEventListener('dragleave', (e: any) => {
      e.preventDefault();
      if (
        this.possibilites.find((pos) => pos === e.target.getAttribute('id'))
      ) {
        e.target.style.background = 'green';
      }
    });
  }
  @HostListener('dragover') pouet2() {
    document.querySelector('div')!.addEventListener('dragover', (e: any) => {
      e.preventDefault();
    });
  }

  @HostListener('drop') JeremyJetaime() {
    document.querySelector('div')!.addEventListener('drop', (e: any) => {
      const target = e.target.closest('div');
      console.log(target);

      if (this.possibilites.find((pos) => pos === target.getAttribute('id'))) {
        const pieceId = e.dataTransfer.getData('piece-id');
        const piece = document.querySelector(`#${pieceId}`);

        target.innerHTML = '';
        target.append(piece);
        //exÃ©cution bruit POC
        //audio.play();

        /* if (cpt % 2 == 0) {
        stopJ2();
      } else {
        stopJ1();
      }
      cpt++;*/
      }
      for (let pos of this.possibilites) {
        (document.querySelector(`#${pos}`) as HTMLDivElement).style.background =
          '';
      }
      this.possibilites = [];
    });

    console.log(this.listeCoups);
    this.deplacement(this.listeCoups);
  }

  constructor() {}

  ngAfterViewInit(): void {
    this.connect();
    document.querySelector('.img')!.addEventListener('dragstart', (e: any) => {
      e.dataTransfer.setData('piece-id', e.target.id);
    });
    // dragDrop();
  }

  ngOnInit(): void {
    // this.connect();
    // this.init();
  }

  addCoord(coordonnee: string) {
    this.coord = coordonnee;
  }
  connect(): any {
    const socket = new SockJS(
      'http://localhost:8080/projet-echecs/gkz-stomp-endpoint'
    );
    this.stompClient = Stomp.over(socket);
    const _this = this;
    this.stompClient.connect({}, function (frame: any) {
      _this.setConnected(true);
      console.log('Connected: ' + frame);
      _this.stompClient.send('/gkz/initialisation', {});
      _this.stompClient.subscribe('/topic/hi', function (hello: any) {
        console.log(hello.body);
        console.log('hello');
        _this.plateau = JSON.parse(hello.body);
        if (_this.prems) {
          _this.listePieces = JSON.parse(hello.body).pieces;
          _this.initImg();
          _this.prems = false;
        }
        console.log(_this.coord);
      });
    });
  }

  initImg() {
    let cpt: number = 0;
    for (let piece of this.listePieces) {
      let divImg = document.querySelector('#' + piece.coordonneeLettre);
      let img = document.createElement('img');
      img.setAttribute('style', 'max-width: 100%;');
      img.setAttribute('id', 'p' + cpt.toString());
      img.setAttribute(
        'src',
        'assets/SpritePiecesPNG/' + piece.nom + piece.couleur + '.png'
      );
      img.setAttribute('draggable', 'true');
      divImg!.append(img);
      cpt++;
    }
  }

  setConnected(connected: boolean) {
    this.disabled = !connected;

    if (connected) {
      this.greetings = [];
    }
  }

  deplacement(coord: string[]) {
    this.stompClient.send('/gkz//jouer-coup', {}),
      JSON.stringify({ coup: coord });
  }
}
